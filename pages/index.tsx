import React, { useEffect } from 'react';
import { GetStaticProps } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import Layout from '../components/Layout';
import { css } from '@emotion/react';
import { AnimatePresence, AnimateSharedLayout, motion } from 'framer-motion';
import { groq } from 'next-sanity';
import { usePreviewSubscription, urlFor, PortableText } from '../lib/sanity';
import { getClient } from '../lib/sanity.server';

interface HomeProps {
  homeData: any;
}

export default function Home({ homeData }: HomeProps) {
  useEffect(
    () =>
      // <-- Now we return the useEffect teardown effect, which will be fired only after the path/search change for the first time

      // trying to use new API - https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo
      window.scroll({
        top: 0,
        left: 0,
        // behavior: 'smooth',
      }),
    []
  );

  const variants = {
    exit: {
      opacity: 0,
      transition: {
        duration: 0.3,
      },
    },
    messageShow: {
      opacity: 1,
      y: 0,
      transition: {
        delay: 0,
        ease: 'easeInOut',
      },
    },
    imageShow: {
      opacity: 1,
      y: 0,
      transition: {
        delay: 0.1,
        ease: 'easeInOut',
      },
    },
    initial: {
      opacity: 0,
      y: 20,
    },
  };

  return (
    <Layout>
      <Head>
        <title>Create Next App</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <main
        css={css`
          margin-left: var(--nav-width);
          min-height: 100vh;
        `}
      >
        <motion.h1
          exit='exit'
          animate='messageShow'
          initial='initial'
          variants={variants}
        >
          {homeData.introText.introText}
        </motion.h1>

        {homeData.projects.map((project: any) => {
          return (
            <React.Fragment key={project.title}>
              <motion.div
                key={project.title}
                exit='exit'
                animate='show'
                initial='initial'
                variants={variants}
              >
                {project.title}
              </motion.div>
              <motion.div
                key={project.projectHero.asset._ref}
                css={css`
                  width: 200px;
                  height: 200px;
                `}
                exit='exit'
                animate='imageShow'
                initial='initial'
                variants={variants}
              >
                <Link
                  href={`/project/${project.slug.current}`}
                  key={project.projectHero.asset._ref}
                  scroll={false}
                >
                  <a key={project.projectHero.asset._ref}>
                    <img
                      css={css`
                        width: 100%;
                        height: 100%;
                        object-fit: cover;
                      `}
                      key={project.projectHero.asset._ref}
                      src={`${urlFor(project.projectHeroImage).url()}`}
                    />
                  </a>
                </Link>
              </motion.div>
            </React.Fragment>
          );
        })}
      </main>
    </Layout>
  );
}

export const getStaticProps: GetStaticProps = async () => {
  return {
    props: {
      homeData: await getClient().fetch(groq`
// *[_type == "project"]{
// title,
// slug{current}
// }
{'projects': *[_type == "project"]{
title,
slug{current},
projectHero,
'projectHeroImage':projectHero.asset->url
},
'introText':*[_type == "homepage"][0]{
  introText
}
}
  `),
    },
  };
};
